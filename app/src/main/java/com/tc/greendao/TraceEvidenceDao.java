package com.tc.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRACE_EVIDENCE".
*/
public class TraceEvidenceDao extends AbstractDao<TraceEvidence, Long> {

    public static final String TABLENAME = "TRACE_EVIDENCE";

    /**
     * Properties of entity TraceEvidence.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CaseNumber = new Property(1, String.class, "caseNumber", false, "CASE_NUMBER");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Feature = new Property(3, String.class, "feature", false, "FEATURE");
        public final static Property Number = new Property(4, String.class, "number", false, "NUMBER");
        public final static Property ExtractPart = new Property(5, String.class, "extractPart", false, "EXTRACT_PART");
        public final static Property ExtractMethod = new Property(6, String.class, "extractMethod", false, "EXTRACT_METHOD");
        public final static Property ExtractPerson = new Property(7, String.class, "extractPerson", false, "EXTRACT_PERSON");
        public final static Property Note = new Property(8, String.class, "note", false, "NOTE");
        public final static Property Witness = new Property(9, String.class, "witness", false, "WITNESS");
        public final static Property ExtractTime = new Property(10, String.class, "extractTime", false, "EXTRACT_TIME");
    }


    public TraceEvidenceDao(DaoConfig config) {
        super(config);
    }
    
    public TraceEvidenceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRACE_EVIDENCE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CASE_NUMBER\" TEXT," + // 1: caseNumber
                "\"NAME\" TEXT," + // 2: name
                "\"FEATURE\" TEXT," + // 3: feature
                "\"NUMBER\" TEXT," + // 4: number
                "\"EXTRACT_PART\" TEXT," + // 5: extractPart
                "\"EXTRACT_METHOD\" TEXT," + // 6: extractMethod
                "\"EXTRACT_PERSON\" TEXT," + // 7: extractPerson
                "\"NOTE\" TEXT," + // 8: note
                "\"WITNESS\" TEXT," + // 9: witness
                "\"EXTRACT_TIME\" TEXT);"); // 10: extractTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRACE_EVIDENCE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TraceEvidence entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String caseNumber = entity.getCaseNumber();
        if (caseNumber != null) {
            stmt.bindString(2, caseNumber);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String feature = entity.getFeature();
        if (feature != null) {
            stmt.bindString(4, feature);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(5, number);
        }
 
        String extractPart = entity.getExtractPart();
        if (extractPart != null) {
            stmt.bindString(6, extractPart);
        }
 
        String extractMethod = entity.getExtractMethod();
        if (extractMethod != null) {
            stmt.bindString(7, extractMethod);
        }
 
        String extractPerson = entity.getExtractPerson();
        if (extractPerson != null) {
            stmt.bindString(8, extractPerson);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(9, note);
        }
 
        String witness = entity.getWitness();
        if (witness != null) {
            stmt.bindString(10, witness);
        }
 
        String extractTime = entity.getExtractTime();
        if (extractTime != null) {
            stmt.bindString(11, extractTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TraceEvidence entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String caseNumber = entity.getCaseNumber();
        if (caseNumber != null) {
            stmt.bindString(2, caseNumber);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String feature = entity.getFeature();
        if (feature != null) {
            stmt.bindString(4, feature);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(5, number);
        }
 
        String extractPart = entity.getExtractPart();
        if (extractPart != null) {
            stmt.bindString(6, extractPart);
        }
 
        String extractMethod = entity.getExtractMethod();
        if (extractMethod != null) {
            stmt.bindString(7, extractMethod);
        }
 
        String extractPerson = entity.getExtractPerson();
        if (extractPerson != null) {
            stmt.bindString(8, extractPerson);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(9, note);
        }
 
        String witness = entity.getWitness();
        if (witness != null) {
            stmt.bindString(10, witness);
        }
 
        String extractTime = entity.getExtractTime();
        if (extractTime != null) {
            stmt.bindString(11, extractTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TraceEvidence readEntity(Cursor cursor, int offset) {
        TraceEvidence entity = new TraceEvidence( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // caseNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // feature
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // number
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // extractPart
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // extractMethod
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // extractPerson
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // note
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // witness
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // extractTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TraceEvidence entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCaseNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFeature(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setExtractPart(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setExtractMethod(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setExtractPerson(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNote(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWitness(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setExtractTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TraceEvidence entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TraceEvidence entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TraceEvidence entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
