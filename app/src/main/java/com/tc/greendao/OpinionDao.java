package com.tc.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OPINION".
*/
public class OpinionDao extends AbstractDao<Opinion, Long> {

    public static final String TABLENAME = "OPINION";

    /**
     * Properties of entity Opinion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CaseNumber = new Property(1, String.class, "caseNumber", false, "CASE_NUMBER");
        public final static Property Metail = new Property(2, String.class, "metail", false, "METAIL");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Object = new Property(4, String.class, "object", false, "OBJECT");
        public final static Property Location = new Property(5, String.class, "location", false, "LOCATION");
        public final static Property Opportunity = new Property(6, String.class, "opportunity", false, "OPPORTUNITY");
        public final static Property Entrance = new Property(7, String.class, "entrance", false, "ENTRANCE");
        public final static Property Method = new Property(8, String.class, "method", false, "METHOD");
        public final static Property Mode = new Property(9, String.class, "mode", false, "MODE");
        public final static Property Feature = new Property(10, String.class, "feature", false, "FEATURE");
        public final static Property Goal = new Property(11, String.class, "goal", false, "GOAL");
        public final static Property PeopleNumber = new Property(12, String.class, "peopleNumber", false, "PEOPLE_NUMBER");
        public final static Property CriminalPlace = new Property(13, String.class, "criminalPlace", false, "CRIMINAL_PLACE");
        public final static Property Tool = new Property(14, String.class, "tool", false, "TOOL");
        public final static Property Process = new Property(15, String.class, "process", false, "PROCESS");
        public final static Property CriminalFeature = new Property(16, String.class, "criminalFeature", false, "CRIMINAL_FEATURE");
        public final static Property IdeaBase = new Property(17, String.class, "ideaBase", false, "IDEA_BASE");
        public final static Property WorkOpinion = new Property(18, String.class, "workOpinion", false, "WORK_OPINION");
        public final static Property SpotCompany = new Property(19, String.class, "spotCompany", false, "SPOT_COMPANY");
        public final static Property Analyzer = new Property(20, String.class, "analyzer", false, "ANALYZER");
    }


    public OpinionDao(DaoConfig config) {
        super(config);
    }
    
    public OpinionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OPINION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CASE_NUMBER\" TEXT," + // 1: caseNumber
                "\"METAIL\" TEXT," + // 2: metail
                "\"TYPE\" TEXT," + // 3: type
                "\"OBJECT\" TEXT," + // 4: object
                "\"LOCATION\" TEXT," + // 5: location
                "\"OPPORTUNITY\" TEXT," + // 6: opportunity
                "\"ENTRANCE\" TEXT," + // 7: entrance
                "\"METHOD\" TEXT," + // 8: method
                "\"MODE\" TEXT," + // 9: mode
                "\"FEATURE\" TEXT," + // 10: feature
                "\"GOAL\" TEXT," + // 11: goal
                "\"PEOPLE_NUMBER\" TEXT," + // 12: peopleNumber
                "\"CRIMINAL_PLACE\" TEXT," + // 13: criminalPlace
                "\"TOOL\" TEXT," + // 14: tool
                "\"PROCESS\" TEXT," + // 15: process
                "\"CRIMINAL_FEATURE\" TEXT," + // 16: criminalFeature
                "\"IDEA_BASE\" TEXT," + // 17: ideaBase
                "\"WORK_OPINION\" TEXT," + // 18: workOpinion
                "\"SPOT_COMPANY\" TEXT," + // 19: spotCompany
                "\"ANALYZER\" TEXT);"); // 20: analyzer
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OPINION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Opinion entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String caseNumber = entity.getCaseNumber();
        if (caseNumber != null) {
            stmt.bindString(2, caseNumber);
        }
 
        String metail = entity.getMetail();
        if (metail != null) {
            stmt.bindString(3, metail);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String object = entity.getObject();
        if (object != null) {
            stmt.bindString(5, object);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(6, location);
        }
 
        String opportunity = entity.getOpportunity();
        if (opportunity != null) {
            stmt.bindString(7, opportunity);
        }
 
        String entrance = entity.getEntrance();
        if (entrance != null) {
            stmt.bindString(8, entrance);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(9, method);
        }
 
        String mode = entity.getMode();
        if (mode != null) {
            stmt.bindString(10, mode);
        }
 
        String feature = entity.getFeature();
        if (feature != null) {
            stmt.bindString(11, feature);
        }
 
        String goal = entity.getGoal();
        if (goal != null) {
            stmt.bindString(12, goal);
        }
 
        String peopleNumber = entity.getPeopleNumber();
        if (peopleNumber != null) {
            stmt.bindString(13, peopleNumber);
        }
 
        String criminalPlace = entity.getCriminalPlace();
        if (criminalPlace != null) {
            stmt.bindString(14, criminalPlace);
        }
 
        String tool = entity.getTool();
        if (tool != null) {
            stmt.bindString(15, tool);
        }
 
        String process = entity.getProcess();
        if (process != null) {
            stmt.bindString(16, process);
        }
 
        String criminalFeature = entity.getCriminalFeature();
        if (criminalFeature != null) {
            stmt.bindString(17, criminalFeature);
        }
 
        String ideaBase = entity.getIdeaBase();
        if (ideaBase != null) {
            stmt.bindString(18, ideaBase);
        }
 
        String workOpinion = entity.getWorkOpinion();
        if (workOpinion != null) {
            stmt.bindString(19, workOpinion);
        }
 
        String spotCompany = entity.getSpotCompany();
        if (spotCompany != null) {
            stmt.bindString(20, spotCompany);
        }
 
        String analyzer = entity.getAnalyzer();
        if (analyzer != null) {
            stmt.bindString(21, analyzer);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Opinion entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String caseNumber = entity.getCaseNumber();
        if (caseNumber != null) {
            stmt.bindString(2, caseNumber);
        }
 
        String metail = entity.getMetail();
        if (metail != null) {
            stmt.bindString(3, metail);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String object = entity.getObject();
        if (object != null) {
            stmt.bindString(5, object);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(6, location);
        }
 
        String opportunity = entity.getOpportunity();
        if (opportunity != null) {
            stmt.bindString(7, opportunity);
        }
 
        String entrance = entity.getEntrance();
        if (entrance != null) {
            stmt.bindString(8, entrance);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(9, method);
        }
 
        String mode = entity.getMode();
        if (mode != null) {
            stmt.bindString(10, mode);
        }
 
        String feature = entity.getFeature();
        if (feature != null) {
            stmt.bindString(11, feature);
        }
 
        String goal = entity.getGoal();
        if (goal != null) {
            stmt.bindString(12, goal);
        }
 
        String peopleNumber = entity.getPeopleNumber();
        if (peopleNumber != null) {
            stmt.bindString(13, peopleNumber);
        }
 
        String criminalPlace = entity.getCriminalPlace();
        if (criminalPlace != null) {
            stmt.bindString(14, criminalPlace);
        }
 
        String tool = entity.getTool();
        if (tool != null) {
            stmt.bindString(15, tool);
        }
 
        String process = entity.getProcess();
        if (process != null) {
            stmt.bindString(16, process);
        }
 
        String criminalFeature = entity.getCriminalFeature();
        if (criminalFeature != null) {
            stmt.bindString(17, criminalFeature);
        }
 
        String ideaBase = entity.getIdeaBase();
        if (ideaBase != null) {
            stmt.bindString(18, ideaBase);
        }
 
        String workOpinion = entity.getWorkOpinion();
        if (workOpinion != null) {
            stmt.bindString(19, workOpinion);
        }
 
        String spotCompany = entity.getSpotCompany();
        if (spotCompany != null) {
            stmt.bindString(20, spotCompany);
        }
 
        String analyzer = entity.getAnalyzer();
        if (analyzer != null) {
            stmt.bindString(21, analyzer);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Opinion readEntity(Cursor cursor, int offset) {
        Opinion entity = new Opinion( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // caseNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // metail
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // object
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // location
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // opportunity
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // entrance
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // method
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // mode
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // feature
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // goal
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // peopleNumber
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // criminalPlace
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // tool
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // process
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // criminalFeature
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // ideaBase
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // workOpinion
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // spotCompany
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // analyzer
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Opinion entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCaseNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMetail(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setObject(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOpportunity(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEntrance(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMethod(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFeature(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGoal(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPeopleNumber(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCriminalPlace(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTool(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setProcess(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCriminalFeature(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIdeaBase(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setWorkOpinion(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setSpotCompany(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setAnalyzer(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Opinion entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Opinion entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Opinion entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
